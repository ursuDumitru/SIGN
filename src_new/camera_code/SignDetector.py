import numpy as np
from keras.models import load_model


class SignDetector:
    """
    This class is used to initialize the model for sign detection.
    """

    def __init__(self, model_weights_path) -> None:
        """
        Initialize the SignDetector object.
        :param model_weights_path: str, the path to the model weights file.
        """
        self.model = load_model(model_weights_path)

    def make_prediction(self, landmark_list):
        """
        This method is used to make a prediction based on the landmarks
        generated by the hands detector(MediaPipe).
        :param landmark_list: list, the landmarks of the hands.
        :return prediction: np.array, the prediction made by the model.
        """
        pass


class SignDetectorStatic(SignDetector):
    """
    This class is an extension of the SignDetector class.
    It is used to predict static signs.
    """

    def __init__(self, model_weights_path) -> None:
        """
        Initialize the SignDetectorStatic object.
        :param model_weights_path: str, path to the static model weights file(.h5).
        """
        super(SignDetectorStatic, self).__init__(model_weights_path)

    def make_prediction(self, normalized_landmarks):
        """
        This method is used to make a prediction based on the landmarks
        generated by the hands detector(MediaPipe) for the static mode.
        :param normalized_landmarks: list, the landmarks of the hands.
        :return prediction: np.array, the prediction made by the model.
        """
        return self.model.predict(np.array([normalized_landmarks]))


class SignDetectorDynamic(SignDetector):
    """
    This class is an extension of the SignDetector class.
    It is used to predict dynamic signs.
    """

    def __init__(self, model_weights_path) -> None:
        """
        Initialize the SignDetectorDynamic object.
        :param model_weights_path: str, path to the dynamic model weights file(.h5).
        """
        super(SignDetectorDynamic, self).__init__(model_weights_path)

    def make_prediction(self, landmark_list):
        """
        This method is used to make a prediction based on the landmarks
        generated by the hands detector(MediaPipe) for the dynamic mode.
        :param landmark_list: list, the landmarks of the hands.
        :return prediction: np.array, the prediction made by the model.
        """
        return self.model.predict(np.array([landmark_list]))
